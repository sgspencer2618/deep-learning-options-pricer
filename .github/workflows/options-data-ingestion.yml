# .github/workflows/options-data-ingestion.yml
name: Options Data Ingestion

on:
  schedule:
    # Run at 9:30 AM UTC every weekday (Monday to Friday)
    - cron: '*/5 9-16 * * 1-5'
  workflow_dispatch:
    # Manual trigger with options
    inputs:
      symbols:
        description: 'Stock symbols (comma-separated)'
        required: true
        default: 'AAPL'
      days:
        description: 'Number of trading days to fetch'
        required: true
        default: '1'
      run_type:
        description: 'Run type'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - test
          - once

jobs:
  ingest-options-data:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create logs directory
        run: mkdir -p logs
      
      - name: Run Data Ingestion
        env:
          ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ca-central-1"
          BUCKET_NAME: "chicken-apple-basket-raw"
          AV_API_KEY: ${{ secrets.AV_API_KEY }}
          LOG_FILE: logs/scheduler.log
        run: |
          # Parse symbols for script arguments
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual trigger, use the provided inputs
            SYMBOLS="${{ github.event.inputs.symbols }}"
            DAYS="${{ github.event.inputs.days }}"
            RUN_TYPE="${{ github.event.inputs.run_type }}"
          else
            # For scheduled events, use default values
            SYMBOLS="AAPL"
            DAYS="30"
            RUN_TYPE="once"
          fi
          
          # Format symbols for command line
          SYMBOLS_FORMATTED=$(echo $SYMBOLS | sed 's/,/ /g')
          
          echo "Using symbols: $SYMBOLS"
          echo "Using days: $DAYS"
          echo "Run type: $RUN_TYPE"
          
          # Run the appropriate command based on run type
          if [ "$RUN_TYPE" == "test" ]; then
            echo "Running test job"
            python dataIngest/scripts/scheduler_service.py --symbols $SYMBOLS_FORMATTED --days $DAYS --test
          elif [ "$RUN_TYPE" == "once" ]; then
            echo "Running job once"
            python dataIngest/scripts/scheduler_service.py --symbols $SYMBOLS_FORMATTED --days $DAYS --run-once
          else
            echo "Running daily job"
            python dataIngest/scripts/scheduler_service.py --symbols $SYMBOLS_FORMATTED --days $DAYS
          fi
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: scheduler-logs
          path: logs/
          retention-days: 7

      
      - name: Report Ingestion Statistics
        if: always()
        run: |
          echo "Generating ingestion report..."
          python -c "
          from dataIngest.helpers.s3_helper import S3Uploader
          import os
          import sys
          
          symbols = '${SYMBOLS}'.split(',')
          uploader = S3Uploader()
          
          print('Data Ingestion Report')
          print('=====================')
          
          for symbol in symbols:
              try:
                  metadata_key = f'options-data/{symbol}/{symbol}_ingestion_metadata.json'
                  metadata = uploader.read_json_from_s3(metadata_key)
                  
                  print(f'\\nSymbol: {symbol}')
                  print(f'Earliest date: {metadata[\"earliest_date\"]}')
                  print(f'Latest date: {metadata[\"latest_date\"]}')
                  print(f'Total dates: {metadata[\"total_dates\"]}')
                  
                  if metadata[\"ingestion_history\"]:
                      latest = metadata[\"ingestion_history\"][-1]
                      print(f'Latest ingestion: {latest[\"timestamp\"]}')
                      print(f'Dates ingested: {len(latest[\"dates_ingested\"])}')
              except Exception as e:
                  print(f'Error reading metadata for {symbol}: {str(e)}')
          "